cov.95[, 1]
cov.95[, 500]
apply(cov.95, 2, mean)
apply(cov.95, 1, mean)
nsims <- 1000
cov.95 <- matrix(NA, length(beta), nsims)
for (i in 1:nsims){
dat <- sim(sim.n = 1000, SIGMA = Sigma * 0)
lm.sim <- lm(ly ~ c_age + l_ly, dat[m == 0 & year > 0])
beta.hat <- coef(lm.sim)
beta.se <- summary(lm.sim)$coef[, 2]
cov.95c[, i] <- abs(beta - beta.hat) < abs(qnorm(.025)) * beta.se
print(i)
}
nsims <- 1000
cov.95 <- matrix(NA, length(beta), nsims)
for (i in 1:nsims){
dat <- sim(sim.n = 1000, SIGMA = Sigma * 0)
lm.sim <- lm(ly ~ c_age + l_ly, dat[m == 0 & year > 0])
beta.hat <- coef(lm.sim)
beta.se <- summary(lm.sim)$coef[, 2]
cov.95[, i] <- abs(beta - beta.hat) < abs(qnorm(.025)) * beta.se
print(i)
}
apply(cov.95, 2, mean)
apply(cov.95, 1, mean)
beta
coef(ly.lm)
nsims <- 1000
cov.95 <- matrix(NA, length(beta), nsims)
for (i in 1:nsims){
dat <- sim(sim.n = 5000, SIGMA = Sigma * 0)
lm.sim <- lm(ly ~ c_age + l_ly, dat[m == 0 & year > 0])
beta.hat <- coef(lm.sim)
beta.se <- summary(lm.sim)$coef[, 2]
cov.95[, i] <- abs(beta - beta.hat) < abs(qnorm(.025)) * beta.se
print(i)
}
apply(cov.95, 1, mean)
paste0("95% Coverage:", apply(cov.95, 1, mean))
library(knitr)
?knitr::render_jekyll()
?render_jekyll()
?md2md
library(rmarkdown)
?md2md
?rmd2md
?knit
?kni
?knit
render_jekyll(highlight = "pygments")
setwd("C:/Users/Devin/Dropbox/Projects/dincerti.github.io/_rmd")
getwd()
path_site = getwd()
path_site
dir_rmd = "_rmd
""
dir_rmd = "_rmd"
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
path.site
url_images = "figures/"
url_images
out_ext='.md'
in_ext='.rmd'
recursive=FALSE
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
files
file.path
?file.path
path_site
path_site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
files
f <- files[1]
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
content
frontMatter <- which(substr(content, 1, 3) == '---')
frontMatter
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
dir_md
dir_md = "_posts"
dir_md
length(frontMatter) >= 2 & 1 %in% frontMatter
frontMatter
frontM<atte
frontMatter
statusLine <- which(substr(content, 1, 7) == 'status:')
statusLine
content
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
publisehdLine
publishedLine
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
outFile
in_ext
out_ext
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext))))))
outFile
out_ext
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
dir_md
path_site
?file.path
outFile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
outFile
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
?opts_knit
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
url_images
url_images <- "figs/"
url_images
opts_chunk$set(fig.path = url_images)
content
knit(text=content, output=outFile)
outFile
outFile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
path_site
?knit
getwd()
path_site = "C:/Users/Devin/Dropbox/Projects/dincerti.github.io/"
path_site
require(knitr)
?list.cases
?list.files
recursive = FALSE
in_ext='.rmd'
url_images = "figures/"
out_ext='.md'
url_figs = "figures/"
dir_rmd = "_rmd"
files <- list.files(path=file.path(path_site, dir_rmd),
pattern = in_ext, ignore.case=TRUE, recursive = recursive)
files
file = "twopart.Rmd"
file
f <- list.files(path=file.path(path_site, dir_rmd),
pattern = in_ext, ignore.case=TRUE, recursive = recursive)
content <- readLines(file.path(path_site,dir_rmd,f))
file.path
path_site
dir_rmd
f
f <- file
f
content <- readLines(file.path(path_site, dir_rmd, f))
dir_rmd
path_site
path_site = "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
content <- readLines(file.path(path_site, dir_rmd, f))
content <- readLines(file.path(path_site, dir_rmd, f))
content
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
outFile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
outFile
outFile
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_figs)
opts_chunk$set
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
outfile
content
knit(text = content, output = outfile)
rmd2md <- function(path_site = "C:/Users/Devin/Dropbox/Projects/dincerti.github.io",
file, dir_rmd = "_rmd", url_figs = "figures/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
f <- list.files("C:/Users/Devin/Dropbox/Projects/dincerti.github.io")
f
f <- list.files("C:/Users/Devin/Dropbox/Projects/dincerti.github.io")
f
f <- list.files("C:/Users/Devin/Dropbox/Projects/dincerti.github.io/_rmd")
f
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
path.site
dir.rmd <- "_rmd"
dir.rmd
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", url_figs = "figures/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", url_figs = "figures/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext))))
)_
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))))
f
f <- "twopart.Rmd"
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext))))
)
f
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
files
rmd2md(file = "twopart.Rmd")
url_figs
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", url_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
url_figs
url_figs = "figs/"
url_figs
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", url_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
url_figs
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", url_figs = "figs",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", url_figs = "figs",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", url_figs = "figs",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/", base.dir = path_site)
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", url_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/", base.dir = path_site)
opts_chunk$set(fig.path = url_figs)
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
?base.url
? opts_chunk
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", dir_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/", base.dir = path_site)
opts_chunk$set(fig.path = dir_figs, fig.width=6, fig.height=4, fig.align='center')
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", dir_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/", base.dir = path_site)
opts_chunk$set(fig.path = dir_figs, fig.width = 8, fig.height = 5, fig.align='center')
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", dir_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/", base.dir = path_site)
opts_chunk$set(fig.path = dir_figs, fig.width = 8, fig.height = 5, fig.align='center')
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", dir_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/", base.dir = path_site)
opts_chunk$set(fig.path = dir_figs, fig.width = 8, fig.height = 5, fig.align='center')
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", dir_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/", base.dir = path_site)
opts_chunk$set(fig.path = dir_figs, fig.width = 8, fig.height = 5, fig.align='center')
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
rm(list = ls())
# globals
path.site <- "C:/Users/Devin/Dropbox/Projects/dincerti.github.io"
# convert r markdown to markdown
rmd2md <- function(path_site = path.site,
file, dir_rmd = "_rmd", dir_figs = "figs/",
out_ext='.md', in_ext='.rmd',
recursive = FALSE) {
require(knitr)
f <- file
content <- readLines(file.path(path_site, dir_rmd, f))
outfile <- file.path(path_site, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown')
opts_knit$set(base.url = "/", base.dir = path_site)
opts_chunk$set(fig.path = dir_figs, fig.width = 8, fig.height = 5, fig.align='center')
knit(text = content, output = outfile)
}
# list of files
files <- list.files(path = file.path(path.site, "_rmd"), pattern = ".rmd",
ignore.case = TRUE, recursive = FALSE)
rmd2md(file = "twopart.Rmd")
